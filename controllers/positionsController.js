const Position = require('../models/Position'); // ‚úÖ Mongoose model
const pool = require('../config/db'); // ‚úÖ Connexion PostgreSQL (pg)

// ‚úÖ R√©cup√®re toutes les positions pour l'utilisateur connect√©
const getAllPositions = async (req, res) => {
  const userId = req.user?.id; // r√©cup√©r√© depuis le JWT

  if (!userId) {
    return res.status(401).json({ message: 'Utilisateur non authentifi√©' });
  }

  try {
    // üîç R√©cup√©rer le vehiculeid li√© √† cet utilisateur depuis PostgreSQL
    const result = await pool.query('SELECT vehiculeid FROM users WHERE id = $1', [userId]);

    if (result.rows.length === 0) {
      return res.status(404).json({ message: 'Utilisateur introuvable en base' });
    }

    const vehiculeId = result.rows[0].vehiculeid;

    // üîç R√©cup√©rer les positions du v√©hicule li√©
    const positions = await Position.find({ vehiculeId });

    return res.status(200).json(positions);
  } catch (err) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des positions :', err);
    return res.status(500).json({ message: 'Erreur serveur', error: err });
  }
};

// ‚úÖ R√©cup√®re les positions pour un userId sp√©cifique pass√© en URL
const getPositionsByUser = async (req, res) => {
  const userId = req.params.userId;

  try {
    // V√©rifier le vehiculeid de cet utilisateur
    const result = await pool.query('SELECT vehiculeid FROM users WHERE id = $1', [userId]);

    if (result.rows.length === 0) {
      return res.status(404).json({ message: 'Utilisateur non trouv√©' });
    }

    const vehiculeId = result.rows[0].vehiculeid;

    const positions = await Position.find({ vehiculeId });

    return res.status(200).json(positions);
  } catch (err) {
    console.error('‚ùå Erreur getPositionsByUser :', err);
    return res.status(500).json({ message: 'Erreur serveur', error: err });
  }
};

// ‚úÖ Cr√©e une nouvelle position (utilis√© par le traceur GPS)
const createPosition = async (req, res) => {
  const { vehiculeId, latitude, longitude, vitesse, timestamp } = req.body;

  const newPosition = new Position({
    vehiculeId,
    latitude,
    longitude,
    vitesse,
    timestamp,
  });

  try {
    await newPosition.save();
    return res.status(201).json({ message: '‚úÖ Position enregistr√©e', data: newPosition });
  } catch (err) {
    console.error('‚ùå Erreur createPosition :', err);
    return res.status(400).json({ message: 'Erreur d‚Äôenregistrement', error: err });
  }
};

// ‚úÖ Met √† jour une position existante
const updatePosition = async (req, res) => {
  try {
    const updated = await Position.findByIdAndUpdate(req.params.id, req.body, { new: true });

    if (!updated) {
      return res.status(404).json({ message: 'Position non trouv√©e' });
    }

    return res.status(200).json({ message: 'Position mise √† jour', data: updated });
  } catch (err) {
    console.error('‚ùå Erreur updatePosition :', err);
    return res.status(500).json({ message: 'Erreur mise √† jour', error: err });
  }
};

// ‚úÖ Supprime une position
const deletePosition = async (req, res) => {
  try {
    const deleted = await Position.findByIdAndDelete(req.params.id);

    if (!deleted) {
      return res.status(404).json({ message: 'Position non trouv√©e' });
    }

    return res.status(200).json({ message: 'Position supprim√©e avec succ√®s' });
  } catch (err) {
    console.error('‚ùå Erreur deletePosition :', err);
    return res.status(500).json({ message: 'Erreur suppression', error: err });
  }
};

module.exports = {
  getAllPositions,
  getPositionsByUser,
  createPosition,
  updatePosition,
  deletePosition,
};
